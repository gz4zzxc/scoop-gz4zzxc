# Scoop Manifest 编写标准

## JSON 格式要求

- 使用 2 空格缩进
- 所有字符串使用双引号
- 确保 JSON 语法正确，可通过 `scoop validate <manifest>` 验证

## 必需字段

```json
{
    "version": "版本号",
    "description": "应用程序描述",
    "homepage": "官方网站 URL",
    "license": "许可证类型"
}
```

## 架构支持

```json
"architecture": {
    "64bit": {
        "url": "64位下载链接",
        "hash": "SHA256 哈希值",
        "extract_dir": "解压目录（可选）"
    },
    "32bit": {
        "url": "32位下载链接",
        "hash": "SHA256 哈希值"
    }
}
```

## 安装脚本最佳实践

### pre_install
- 用于下载前的准备工作
- 处理特殊的下载需求（如 User-Agent）
- 提供清晰的进度反馈

### installer
- 执行实际的安装过程
- 使用静默安装参数（如 `/S`）
- 包含错误处理

### post_install
- 安装后的配置工作
- 提供用户友好的提示信息
- 设置快捷方式和注册表项

## 特殊处理

### 下载限制处理
对于有下载限制的应用程序（如阿里云盘），使用以下模式：

```powershell
$userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
try {
    Invoke-WebRequest -Uri $downloadUrl -UserAgent $userAgent -OutFile $outputFile
} catch {
    # 备用下载方法
    $webClient = New-Object System.Net.WebClient
    $webClient.Headers.Add('User-Agent', $userAgent)
    $webClient.DownloadFile($downloadUrl, $outputFile)
}
```

### 上下文菜单集成
对于需要集成到 Windows 上下文菜单的应用程序：

```json
"post_install": [
    "$7zip_root = \"$dir\".Replace('\\', '\\\\')",
    "'install-context.reg', 'uninstall-context.reg' | ForEach-Object {",
    "    $content = Get-Content \"$bucketsdir\\gz4zzxc\\scripts\\7zip\\$_\"",
    "    $content = $content.Replace('$7zip_root', $7zip_root)",
    "    Set-Content \"$dir\\$_\" $content -Encoding Ascii",
    "}"
]
```

## 自动更新配置

```json
"checkver": {
    "url": "版本检查页面",
    "regex": "版本号正则表达式"
},
"autoupdate": {
    "url": "自动更新下载链接模板"
}
```
description:
globs:
alwaysApply: false
---
