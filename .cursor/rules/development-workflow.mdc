# 开发工作流程指南

## 添加新应用程序

### 1. 创建 Manifest 文件
在 `bucket/` 目录中创建新的 JSON 文件：

```json
{
    "version": "版本号",
    "description": "应用程序描述",
    "homepage": "官方网站",
    "license": "许可证类型",
    "architecture": {
        "64bit": {
            "url": "下载链接",
            "hash": "SHA256 哈希值"
        }
    }
}
```

### 2. 测试 Manifest
```powershell
# 验证 JSON 语法
scoop validate bucket/app-name.json

# 测试安装
scoop install bucket/app-name.json

# 测试卸载
scoop uninstall app-name
```

### 3. 更新文档
- 在 [README.md](mdc:README.md) 中添加新应用程序信息
- 更新应用程序列表表格
- 添加使用说明

## 更新现有应用程序

### 1. 检查新版本
```powershell
# 检查应用程序是否有新版本
scoop update app-name

# 或手动检查官方网站
```

### 2. 更新 Manifest
- 更新版本号
- 更新下载链接和哈希值
- 测试安装脚本

### 3. 提交更改
```bash
git add bucket/app-name.json
git commit -m "Update app-name to version X.X.X"
git push origin main
```

## 特殊处理需求

### 下载限制处理
对于有下载限制的应用程序：

1. 在 `pre_install` 中添加下载逻辑
2. 使用适当的 User-Agent
3. 实现备用下载方法
4. 提供清晰的错误信息

### 注册表集成
对于需要注册表集成的应用程序：

1. 创建 `.reg` 文件模板
2. 在 `scripts/` 目录中组织脚本
3. 在 `post_install` 中处理路径替换
4. 支持全局和用户安装模式

## 质量保证

### 测试清单
- [ ] JSON 语法验证通过
- [ ] 安装测试成功
- [ ] 卸载测试成功
- [ ] 功能测试通过
- [ ] 错误处理测试通过

### 代码审查
- 检查 PowerShell 脚本的安全性
- 验证错误处理逻辑
- 确保用户反馈清晰
- 检查中文本地化质量

## 自动化

### GitHub Actions
项目包含自动更新工作流：

- **Excavator**: 自动检查应用程序更新
- **Schedule**: 每日 8:00 AM 北京时区
- **Target**: 阿里云盘等应用程序

### 手动触发
```bash
# 手动运行更新检查
gh workflow run excavator.yml
```

## 发布流程

### 1. 准备发布
- 确保所有测试通过
- 更新版本信息
- 检查文档完整性

### 2. 创建发布
- 使用语义化版本号
- 编写发布说明
- 包含更新日志

### 3. 通知用户
- 更新 README 中的版本信息
- 发布 GitHub Release
- 通知相关社区
description:
globs:
alwaysApply: false
---
