name: Auto Update Manifests

on:
  schedule:
    # Run at 8:00 AM Beijing Time (UTC+8) = 00:00 UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-manifests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 lxml

      - name: Validate current manifests
        run: |
          echo "Validating manifest files..."
          for manifest in bucket/*.json; do
            echo "Checking $manifest..."
            python3 -m json.tool "$manifest" > /dev/null && echo "‚úÖ $manifest is valid JSON" || echo "‚ùå $manifest has invalid JSON"
          done

      - name: Check for AliyunDrive updates
        id: check-updates
        run: |
          python3 << 'EOF'
          import json
          import re
          import requests
          from datetime import datetime
          import os

          def check_aliyundrive_update():
              try:
                  # Read current version from manifest
                  with open('bucket/aliyundrive.json', 'r', encoding='utf-8') as f:
                      manifest = json.load(f)
                  current_version = manifest['version']

                  print(f"Current version: {current_version}")

                  # Method 1: Try to fetch download page directly
                  try:
                      response = requests.get('https://www.aliyundrive.com/download',
                                            timeout=30,
                                            headers={
                                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                                            })
                      response.raise_for_status()

                      # Extract version from download URL
                      version_match = re.search(r'aDrive-(\d+\.\d+\.\d+)\.exe', response.text)
                      if version_match:
                          latest_version = version_match.group(1)
                          print(f"Found version from download page: {latest_version}")
                      else:
                          raise Exception("Version not found in download page")

                  except Exception as e:
                      print(f"Method 1 failed: {e}")
                      # Method 2: Check if current version download URL is still valid
                      current_download_url = f"https://cdn.aliyundrive.net/downloads/apps/desktop/aDrive-{current_version}.exe"
                      print(f"Checking if current version download URL is still valid: {current_download_url}")
                      try:
                          head_response = requests.head(current_download_url, timeout=10, headers={
                              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                          })
                          if head_response.status_code == 200:
                              print("‚úÖ Current version download URL is still valid, assuming no update")
                              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                                  f.write(f"updated=false\n")
                              return False
                          else:
                              print(f"‚ùå Current download URL returned {head_response.status_code}")
                      except Exception as url_check_error:
                          print(f"‚ùå Error checking current download URL: {url_check_error}")

                      # Method 3: Try common version increments
                      version_parts = current_version.split('.')
                      if len(version_parts) == 3:
                          # Try incrementing patch version
                          patch = int(version_parts[2])
                          for i in range(1, 10):  # Try next 9 patch versions
                              test_version = f"{version_parts[0]}.{version_parts[1]}.{patch + i}"
                              test_url = f"https://cdn.aliyundrive.net/downloads/apps/desktop/aDrive-{test_version}.exe"
                              print(f"Testing version {test_version}...")
                              test_response = requests.head(test_url, timeout=5, headers={
                                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                              })
                              if test_response.status_code == 200:
                                  latest_version = test_version
                                  print(f"Found newer version: {latest_version}")
                                  break
                          else:
                              print("No newer version found through URL testing")
                              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                                  f.write(f"updated=false\n")
                              return False
                      else:
                          print("Cannot parse current version format")
                          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                              f.write(f"updated=false\n")
                          return False

                  download_url = f"https://cdn.aliyundrive.net/downloads/apps/desktop/aDrive-{latest_version}.exe"
                  print(f"Latest version: {latest_version}")

                  if latest_version != current_version:
                      # Verify the new URL exists with proper User-Agent
                      verify_response = requests.head(download_url, timeout=10, headers={
                          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                      })
                      if verify_response.status_code != 200:
                          print(f"‚ùå New version URL not accessible: {verify_response.status_code}")
                          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                              f.write(f"updated=false\n")
                          return False

                      # Update manifest - keep the placeholder URL structure but update version
                      manifest['version'] = latest_version
                      # Keep the placeholder URL structure unchanged - it uses placeholder.txt
                      # The pre_install script already uses $version variable, so it will automatically use the new version

                      # Update autoupdate URL
                      if 'autoupdate' in manifest:
                          manifest['autoupdate']['url'] = f"https://cdn.aliyundrive.net/downloads/apps/desktop/aDrive-$version.exe"

                      # Write updated manifest
                      with open('bucket/aliyundrive.json', 'w', encoding='utf-8') as f:
                          json.dump(manifest, f, indent=4, ensure_ascii=False)

                      # Set output for GitHub Actions
                      with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                          f.write(f"updated=true\n")
                          f.write(f"old_version={current_version}\n")
                          f.write(f"new_version={latest_version}\n")

                      print(f"‚úÖ Updated AliyunDrive from {current_version} to {latest_version}")
                      return True
                  else:
                      print("‚úÖ AliyunDrive is up to date")
                      with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                          f.write(f"updated=false\n")
                      return False

              except Exception as e:
                  print(f"‚ùå Error checking AliyunDrive updates: {e}")
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"updated=false\n")
                  return False

          check_aliyundrive_update()
          EOF

      - name: Update README if version changed
        if: steps.check-updates.outputs.updated == 'true'
        run: |
          python3 << 'EOF'
          import re

          # Read README
          with open('README.md', 'r', encoding='utf-8') as f:
              content = f.read()

          # Update version in table
          old_version = "${{ steps.check-updates.outputs.old_version }}"
          new_version = "${{ steps.check-updates.outputs.new_version }}"

          # Replace version in the table
          pattern = r'(\| aliyundrive \| .+ \| )' + re.escape(old_version) + r'( \|)'
          replacement = r'\g<1>' + new_version + r'\g<2>'
          content = re.sub(pattern, replacement, content)

          # Write updated README
          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(content)

          print(f"‚úÖ Updated README version from {old_version} to {new_version}")
          EOF

      - name: Commit and push changes
        if: steps.check-updates.outputs.updated == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          author_name: GitHub Actions Bot
          author_email: actions@github.com
          message: |
            ü§ñ Auto-update AliyunDrive to v${{ steps.check-updates.outputs.new_version }}

            - Updated from v${{ steps.check-updates.outputs.old_version }} to v${{ steps.check-updates.outputs.new_version }}
            - Auto-detected from https://www.aliyundrive.com/download
            - Updated at: ${{ github.run_id }}
          add: |
            bucket/aliyundrive.json
            README.md

      - name: Create Issue for Update Notification
        if: steps.check-updates.outputs.updated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'auto-update,aliyundrive',
              state: 'open'
            });

            // Close existing auto-update issues
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ü§ñ AliyunDrive Auto-Updated to v${{ steps.check-updates.outputs.new_version }}`,
              body: `## üéâ AliyunDrive has been automatically updated!

            **Version Change:**
            - **From:** v${{ steps.check-updates.outputs.old_version }}
            - **To:** v${{ steps.check-updates.outputs.new_version }}

            **Download URL:**
            \`https://cdn.aliyundrive.net/downloads/apps/desktop/aDrive-${{ steps.check-updates.outputs.new_version }}.exe\`

            **Installation:**
            \`\`\`powershell
            # Add bucket (if not already added)
            scoop bucket add gz4zzxc https://github.com/gz4zzxc/scoop-gz4zzxc

            # Install or update
            scoop install gz4zzxc/aliyundrive
            # or
            scoop update aliyundrive
            \`\`\`

            **Files Updated:**
            - \`bucket/aliyundrive.json\`
            - \`README.md\`

            **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *This issue was automatically created by GitHub Actions on ${new Date().toISOString()}*`,
              labels: ['auto-update', 'aliyundrive', 'enhancement']
            });

      - name: Create release if major update
        if: steps.check-updates.outputs.updated == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: aliyundrive-v${{ steps.check-updates.outputs.new_version }}
          release_name: AliyunDrive v${{ steps.check-updates.outputs.new_version }}
          body: |
            üéâ AliyunDrive has been automatically updated!

            **Changes:**
            - Updated from v${{ steps.check-updates.outputs.old_version }} to v${{ steps.check-updates.outputs.new_version }}
            - Download URL: https://cdn.aliyundrive.net/downloads/apps/desktop/aDrive-${{ steps.check-updates.outputs.new_version }}.exe

            **Installation:**
            ```powershell
            scoop bucket add gz4zzxc https://github.com/gz4zzxc/scoop-gz4zzxc
            scoop install gz4zzxc/aliyundrive
            ```

            **Or update existing installation:**
            ```powershell
            scoop update aliyundrive
            ```
          draft: false
          prerelease: false

  # Êñ∞Â¢ûÔºö‰ΩøÁî®ÂÆòÊñπ Excavator Ëá™Âä®Êõ¥Êñ∞ÂÖ∂‰ªñÂ∫îÁî®
  update-other-apps:
    runs-on: ubuntu-latest
    needs: update-manifests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Scoop
        run: |
          # ÂÆâË£Ö Scoop
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')

      - name: Add main bucket
        run: |
          scoop bucket add main

      - name: Run Excavator
        run: |
          # ‰ΩøÁî® Excavator ËøêË°å checkver Âíå autoupdate
          # Ëøô‰ºöËá™Âä®Ê£ÄÊµãÂπ∂Êõ¥Êñ∞ÊâÄÊúâÊúâ checkver/autoupdate ÈÖçÁΩÆÁöÑÂ∫îÁî®
          scoop install main/excavator
          
          # ËøêË°å Excavator Êõ¥Êñ∞ÊâÄÊúâÂ∫îÁî®
          excavator --bucket gz4zzxc --dir bucket
          
          # ÊàñËÄÖÈÄê‰∏™ËøêË°å checkver Âíå autoupdate
          # scoop checkver -u trafficmonitor
          # scoop checkver -u 7zip
          # scoop checkver -u eudic

      - name: Check for changes
        id: check-changes
        run: |
          # Ê£ÄÊü•ÊòØÂê¶ÊúâÊñá‰ª∂Ë¢´‰øÆÊîπ
          if git diff --quiet; then
            echo "no-changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ No changes detected"
          else
            echo "no-changes=false" >> $GITHUB_OUTPUT
            echo "üìù Changes detected"
            git diff --name-only
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.no-changes == 'false'
        uses: EndBug/add-and-commit@v9
        with:
          author_name: GitHub Actions Bot
          author_email: actions@github.com
          message: |
            ü§ñ Auto-update apps via Excavator

            - Updated apps using official ScoopInstaller/Excavator
            - Auto-detected from checkver/autoupdate configurations
            - Updated at: ${{ github.run_id }}
          add: |
            bucket/*.json

      - name: Create summary issue
        if: steps.check-changes.outputs.no-changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Ëé∑ÂèñÊõ¥Êñ∞ÁöÑÂ∫îÁî®ÂàóË°®
            const { data: diff } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.sha,
              head: context.sha
            });

            const updatedApps = diff.files
              .filter(file => file.filename.startsWith('bucket/') && file.filename.endsWith('.json'))
              .map(file => file.filename.replace('bucket/', '').replace('.json', ''));

            if (updatedApps.length > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ü§ñ Apps Auto-Updated via Excavator`,
                body: `## üéâ Apps have been automatically updated via Excavator!

            **Updated Apps:**
            ${updatedApps.map(app => `- \`${app}\``).join('\n')}

            **Update Method:**
            - Used official ScoopInstaller/Excavator
            - Ran checkver/autoupdate for all configured apps
            - Updated at: ${{ github.run_id }}

            **Installation:**
            \`\`\`powershell
            # Add bucket (if not already added)
            scoop bucket add gz4zzxc https://github.com/gz4zzxc/scoop-gz4zzxc

            # Update specific app
            scoop update ${updatedApps[0]}
            \`\`\`

            **Files Updated:**
            ${updatedApps.map(app => `- \`bucket/${app}.json\``).join('\n')}

            ---
            *This issue was automatically created by GitHub Actions on ${new Date().toISOString()}*`,
                labels: ['auto-update', 'excavator', 'enhancement']
              });
            }
